#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# __author__ = "zhipeng zhao"
# date: 2017/11/4

"""
the function of this module is reset the default parameters:
    1. 'job_name': '"Qsub_task"' <-- generated by the program and that consists of the task ID and the front part of the
        dot of compressed file name --> such as 1_teat, 2_CEGG_Express
    2. 'nodes number': 1 <-- the nodes number selected in the server
    3. 'ppn(cpu number)': 2
    4. 'memory size(G)': 4
    5. 'node name': 'zh'

    the frame of this module:
        1. get_qsub_set_file() --> get the paths of the file -- qsub_setting_demo.py and qsub_setting.py
        2. get_para(data) --> get the parameters which is displayed in the above from users typing and return a dict
        3. output_stdout(data, is_deflt) --> print the default para and display the result of setting

the demo of qsub default param:
    QSUB_PARAM = {
        'job_name': '"Qsub_task"',
        'nodes number': 1,
        'ppn(cpu number)': 2,
        'memory size(G)': 4,
        'node name': 'zh'
    }
"""

import os
import re
import sys


# -------------------------------------------------------------------------------------------- #
#           get the paths of the files -- qsub_setting_demo.py and qsub_setting.py             #
# -------------------------------------------------------------------------------------------- #


def get_qsub_set_file(par_dir):
    """ generate the path of the file and return the paths """

    qubs_set_demo_file = os.path.join(par_dir, r'db', r'qsub_setting_demo.py')
    qubs_set_file = os.path.join(par_dir, r'conf', r'qsub_setting.py')
    return qubs_set_demo_file, qubs_set_file

# -------------------------------------------------------------------------------------------- #
#   get the parameters which is displayed in the above from users typing and return a dict     #
# -------------------------------------------------------------------------------------------- #


def get_param(data):
    """ obtain the value user input and return a data dict """
    for alias_name in data:
        if alias_name != 'job_name':  # because job name is given by the program automatically
            while True:
                con = input('[\33[32;1m%s:\33[0m] \33[32;1m\n>>>\33[0m ' % alias_name)
                if alias_name == 'node name':
                    con = '"%s"' % con if con else data['node name']
                elif not con.isnumeric():
                    print('\33[33;1mplease input positive integer\33[0m(1, 2, 3, ...)')
                    continue
                is_sure = input('the {} is {} [\33[32;1my\33[0m/\33[32;1mn\33[0m]\n\33[32;1m>>>\33[0m'.format(
                    alias_name, con))
                if is_sure.lower() == 'n':
                    continue
                else:
                    data[alias_name] = con if con else data[alias_name]
                    break
    return data

# -------------------------------------------------------------------------------------------- #
#                print the default para and display the result of setting                      #
# -------------------------------------------------------------------------------------------- #


def output_stdout(data, is_deflt):
    """ printing the parameter that is convenient for users to know the parameters """
    if not is_deflt:
        print('\33[33;1mResult of setting\33[0m:')
    for key, val in data.items():
        print('\t\33[33;1m%s\33[0m: \33[32;1m%s\33[0m' % (key, val))

# -------------------------------------------------------------------------------------------- #
#                                  main block of process                                       #
# -------------------------------------------------------------------------------------------- #


if __name__ == '__main__':

    # get the path of UnpackFiles folder
    parent_dir = os.path.dirname(os.path.abspath(__file__))
    while True:
        if os.path.basename(parent_dir) == 'UnpackFiles':
            # parent_path = temp_path
            break
        else:
            parent_dir = os.path.dirname(parent_dir)
    # add path to environment variables
    sys.path.append(parent_dir)

    from conf import settings


    param_data = settings.QSUB_PARAM

    para_to_data = {
        'NAME': 'job_name',
        'NODES': 'nodes number',
        'PPN': 'ppn(cpu number)',
        'MEM': 'memory size(G)',
        'POOL': 'node name'
    }

    # get the path being obtain the demo para and output the para
    demo_file, set_file = get_qsub_set_file(parent_dir)
    # read demo file and output the result of setting
    with open(demo_file) as my_reader, open(set_file, 'w') as my_writer:
        # the stdout of default paras
        print('\33[32;1mthe default parameter\33[0m:')
        output_stdout(param_data, True)
        # judge whether user change the paras to default
        _is_default = input('\33[33;1mWhether reset to default\33[0m\n\33[32;1m[\33[32;1my\33[0m/\33[32;1mn\33[0m]'
                           '>>>\33[0m')
        # used to judge whether the param_data is default
        is_default = False
        # if _is_default is 'y', param_data will be default
        if _is_default == 'y':  # reset to default
            is_default = True
        else:  # reset to paras given by users
            # get paras users give
            para_data = get_param(param_data)
        # output paras to qsub setting file
        for line in my_reader:
            line = line.strip()
            for k, v in para_to_data.items():
                if re.match(k, line):
                    line = line.rsplit(' ', 1)
                    line[1] = str(param_data[v])
                    line = ' '.join(line)
            my_writer.write('%s\n' % line)
        # the stdout of paras users give
        output_stdout(param_data, is_default)
